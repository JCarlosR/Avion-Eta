
	NOLIST
; PICBASIC PRO(TM) Compiler 2.47, (c) 1998, 2006 microEngineering Labs, Inc. All Rights Reserved.  

LABEL?L macro Label
        RST?RP
    ifdef PM_USED
        LALL
Label
        XALL
    else
Label
    endif
    endm

ADD?BCB macro Bin, Cin, Bout
    if (Bout == Bin)
      if (Cin == 1)
        CHK?RP  Bout
        incf    Bout, F
      else
        movlw   Cin
        CHK?RP  Bin
        addwf   Bin, F
      endif
    else
      if (Cin == 1)
        CHK?RP  Bin
        incf    Bin, W
        MOVE?AB Bout
      else
        movlw   Cin
        CHK?RP  Bin
        addwf   Bin, W
        MOVE?AB Bout
      endif
    endif
    endm

ADD?BCW macro Bin, Cin, Wout
        movlw   low (Cin)
        CHK?RP  Bin
        addwf   Bin, W
        MOVE?AB Wout
    if (((Cin) >> 8) == 0)
        clrf    Wout + 1
        rlf     Wout + 1, F
    else
        movlw   (Cin) >> 8
        btfsc   STATUS, C
        addlw   1
        movwf   Wout + 1
    endif
    endm

ADD?CBW macro Cin, Bin, Wout
        movlw   low (Cin)
        CHK?RP  Bin
        addwf   Bin, W
        MOVE?AB Wout
    if (((Cin) >> 8) == 0)
        clrf    Wout + 1
        rlf     Wout + 1, F
    else
        movlw   (Cin) >> 8
        btfsc   STATUS, C
        addlw   1
        movwf   Wout + 1
    endif
    endm

ADD?WCW macro Win, Cin, Wout
    if (Wout == Win)
      if (Cin == 1)
        CHK?RP  Wout
        incf    Wout, F
        btfsc   STATUS, Z
        incf    Wout + 1, F
      else  
        movlw   low (Cin)
        CHK?RP  Wout
        addwf   Wout, F
        if (((Cin) >> 8) == 0)
        btfsc   STATUS, C
        incf    Wout + 1, F
        else
        movlw   (Cin) >> 8
        btfsc   STATUS, C
        addlw   1
        addwf   Wout + 1, F
        endif
      endif
    else
        movlw   low (Cin)
        CHK?RP  Win
        addwf   Win, W
        MOVE?AB Wout
      if (((Cin) >> 8) == 0)
        MOVE?BA Win + 1
        btfsc   STATUS, C
        addlw   1
        MOVE?AB Wout + 1
      else
        movlw   (Cin) >> 8
        btfsc   STATUS, C
        addlw   1
        CHK?RP  Win
        addwf   Win + 1, W
        MOVE?AB Wout + 1
      endif
    endif
    endm

MOD?BCW macro Bin, Cin, Wout
        MOVE?BW Bin, R0
        MOVE?CW Cin, R1
        L?CALL  DIV
        MOVE?WW R2, Wout
    endm
DIV_USED = 1

MUL?BCB macro Bin, Cin, Bout
        MOVE?BW Bin, R3
        MOVE?CW Cin, R1
        L?CALL  MUL
        MOVE?AB Bout
    endm
MUL_USED = 1

MUL?BCW macro Bin, Cin, Wout
        MOVE?BW Bin, R3
        MOVE?CW Cin, R1
        L?CALL  MUL
        MOVE?AWW R2, Wout
    endm
MUL_USED = 1

SUB?BCB macro Bin, Cin, Bout
    if (Bout == Bin)
      if (Cin == 1)
        CHK?RP  Bout
        decf    Bout, F
      else
        movlw   Cin
        CHK?RP  Bout
        subwf   Bout, F
      endif
    else
      if (Cin == 1)
        CHK?RP  Bin
        decf    Bin, W
        MOVE?AB Bout
      else
        movlw   Cin
        CHK?RP  Bin
        subwf   Bin, W
        MOVE?AB Bout
      endif
    endif
    endm

SUB?CBB macro Cin, Bin, Bout
        MOVE?BA Bin
        sublw   Cin
        MOVE?AB Bout
    endm

SUB?WCW macro Win, Cin, Wout
    if (Wout == Win)
        movlw   low (Cin)
        CHK?RP  Wout
        subwf   Wout, F
        movlw   (Cin) >> 8
        btfss   STATUS, C
        addlw   1
        subwf   Wout + 1, F
    else
        movlw   low (Cin)
        CHK?RP  Win
        subwf   Win, W
        MOVE?AB Wout
        movlw   (Cin) >> 8
        btfss   STATUS, C
        addlw   1
        CHK?RP  Win
        subwf   Win + 1, W
        MOVE?AB Wout + 1
    endif
    endm

LAND?BBW macro Bin1, Bin2, Wout
        MOVE?BB Bin1, FSR
        MOVE?BA Bin2
        L?CALL  LAND
        MOVE?AB Wout
        movwf   Wout + 1
    endm
LAND_USED = 1

LOR?BBW macro Bin1, Bin2, Wout
        MOVE?BB Bin1, FSR
        MOVE?BA Bin2
        L?CALL  LOR
        MOVE?AB Wout
        movwf   Wout + 1
    endm
LOR_USED = 1

CMPF?WL macro Win, Label
        CLRWDT?
        MOVE?BA Win
        iorwf   Win + 1, W
        BIT?GOTO 1, STATUS, Z, Label
    endm

CMPEQ?BCB macro Bin, Cin, Bout
    if (Cin < 100h)
        MOVE?BB Bin, R0
        MOVE?CA Cin
        L?CALL  CMPEQB
        MOVE?AB Bout
    else
        CHK?RP  Bout
        clrf    Bout
    endif
    endm
CMPEQB_USED = 1

CMPEQ?TCB macro Regin, Bitin, Cin, Bout
    if (Cin < 2)
        MOVE?TB Regin, Bitin, R0
        MOVE?CA Cin
        L?CALL  CMPEQB
        MOVE?AB Bout
    else
        CHK?RP  Bout
        clrf    Bout
    endif
    endm
CMPEQB_USED = 1

CMPGT?BCL macro Bin, Cin, Label
    if (Cin < 0ffh)
        CLRWDT?
        MOVE?CA Cin + 1
        CHK?RP  Bin
        subwf   Bin, W
        BIT?GOTO 1, STATUS, C, Label
    endif
    endm

CMPGT?BWL macro Bin, Win, Label
        MOVE?BW Bin, R0
        MOVE?WWA Win, R1
        L?CALL  CMPGT
        BIT?GOTO 0, STATUS, Z, Label
    endm
CMPGT_USED = 1

CMPLE?BCL macro Bin, Cin, Label
    if (Cin < 0ffh)
        CLRWDT?
        MOVE?CA Cin + 1
        CHK?RP  Bin
        subwf   Bin, W
        BIT?GOTO 0, STATUS, C, Label
    else
        L?GOTO  Label
    endif
    endm

CMPLT?BCB macro Bin, Cin, Bout
    if (Cin < 100h)
        MOVE?BB Bin, R0
        MOVE?CA Cin
        L?CALL  CMPLTB
        MOVE?AB Bout
    else
        movlw   -1
        MOVE?AB Bout
    endif
    endm
CMPLTB_USED = 1

CMPNE?BBL macro Bin1, Bin2, Label
        CLRWDT?
        MOVE?BA Bin1
        CHK?RP  Bin2
        subwf   Bin2, W
        BIT?GOTO 0, STATUS, Z, Label
    endm

CMPNE?BCL macro Bin, Cin, Label
    if (Cin < 100h)
        CLRWDT?
        MOVE?BA Bin
        sublw   Cin
        BIT?GOTO 0, STATUS, Z, Label
    else
        L?GOTO  Label
    endif
    endm

CMPNE?TCL macro Regin, Bitin, Cin, Label
    if (Cin == 0)
        CLRWDT?
        BIT?GOTO 1, Regin, Bitin, Label
    else
      if (Cin == 1)
        CLRWDT?
        BIT?GOTO 0, Regin, Bitin, Label
      else
        L?GOTO  Label
      endif
    endif
    endm

DISABLE? macro
    endm

ENABLE? macro
    endm

GOSUB?L macro Label
    local dlabel
    ifdef DEBUG_STACK
        CHK?RP  DEBUG_STACK
      ifdef DEBUG_STACK_ADDR
        bcf     STATUS, C
        rlf     DEBUG_STACK, W
        addlw   DEBUG_STACK_ADDR
        movwf   FSR
        movlw   low (dlabel)
        movwf   INDF
        incf    FSR, F
        movlw   (dlabel) >> 8
        movwf   INDF
      endif
        incf    DEBUG_STACK, F
    endif
        L?CALL  Label
dlabel
    endm

GOTO?L macro Label
        L?GOTO  Label
    endm

ICALL?L macro Label
        L?CALL  Label
    endm

LCDOUT?C macro Cin
        MOVE?CA Cin
        L?CALL  LCDOUT
    endm
LCDOUT_USED = 1

LCDOUT?W macro Win
        MOVE?WA Win
        L?CALL  LCDOUT
    endm
LCDOUT_USED = 1

LCDOUTCOUNT?C macro Cin
        MOVE?CB Cin, R4 + 1
    endm

LCDOUTNUM?W macro Win
        MOVE?WW Win, R2
    endm

LCDOUTDEC? macro
        MOVE?CW LCDOUTJ, R8
        L?CALL  SEROUT2DEC
    endm
LCDOUTJ_USED = 1
SEROUT2DEC_USED = 1

NEXT?BCL macro Bin, Cin, Label
    if (Cin == 1)
        CHK?RP  Bin
      if ((PREV_BANK == 0) & (CODE_SIZE <= 2))
        incfsz  Bin, F
        goto    Label
      else
        incf    Bin, F
        BIT?GOTO 0, STATUS, Z, Label
      endif
    else
      if (Cin <= 255)
        movlw   Cin
        CHK?RP  Bin
        addwf   Bin, F
        BIT?GOTO 0, STATUS, C, Label
      endif
    endif
    endm

ONINT?LL macro Inthand, Intchk
    local label
        bsf     INTCON, GIE
        L?GOTO  label
Intchk  btfsc   INTCON, GIE
        return
        L?GOTO  Inthand
label
    endm
ONINT_USED = 1

READ?BB macro Bin, Bout
        MOVE?BA Bin
        L?CALL  READ
        MOVE?AB Bout
    endm
READ_USED = 1

READ?WB macro Win, Bout
        MOVE?WA Win
        L?CALL  READ
        MOVE?AB Bout
    endm
READ_USED = 1

RESUME? macro
        RST?RP
        retfie
    endm

RETURN? macro
    ifdef DEBUG_STACK
        CHK?RP  DEBUG_STACK
        decf    DEBUG_STACK, F
    endif
        RST?RP
        return
    endm


	LIST
